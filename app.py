from fastapi import FastAPI, File, UploadFile
from fastapi.middleware.cors import CORSMiddleware
from PIL import Image
import io
import numpy as np
import tensorflow as tf
from tensorflow.keras.models import load_model
from tensorflow.keras.applications.mobilenet_v2 import preprocess_input

app = FastAPI()

# ‚úÖ ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ React Native ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏ß‡πá‡∏ö‡πÅ‡∏≠‡∏õ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # ‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏≥‡∏´‡∏ô‡∏î origin ‡∏Ç‡∏≠‡∏á‡πÅ‡∏≠‡∏õ‡∏Ñ‡∏∏‡∏ì
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# üß† ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏• Keras (.keras)
model = load_model("Flowermodel8.keras")

# üå∏ Class names (‡πÅ‡∏Å‡πâ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏ï‡∏≠‡∏ô train)
class_names = [
    "‡πÄ‡∏î‡∏ã‡∏µ‡πà","‡πÅ‡∏î‡∏ô‡∏î‡∏¥‡πÑ‡∏•‡∏≠‡∏±‡∏ô","‡∏ä‡∏ö‡∏≤","‡∏î‡∏≠‡∏Å‡πÄ‡∏Ç‡πá‡∏°","‡∏°‡∏∞‡∏•‡∏¥","‡∏ö‡∏±‡∏ß","‡∏î‡∏≤‡∏ß‡πÄ‡∏£‡∏∑‡∏≠‡∏á","‡∏Å‡∏•‡πâ‡∏ß‡∏¢‡πÑ‡∏°‡πâ","‡∏Å‡∏∏‡∏´‡∏•‡∏≤‡∏ö","‡∏ó‡∏≤‡∏ô‡∏ï‡∏∞‡∏ß‡∏±‡∏ô","‡∏ó‡∏¥‡∏ß‡∏•‡∏¥‡∏õ", "‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö"
]


# üìê ‡∏Ç‡∏ô‡∏≤‡∏î input ‡∏Ç‡∏≠‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏• (‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà train ‡πÑ‡∏ß‡πâ)
IMG_SIZE = 224

# ‚úÖ ‡∏´‡∏ô‡πâ‡∏≤ root
@app.get("/")
def root():
    return {"message": "üå∏ Flower Classifier API (Keras) is running!"}
    
# üì∑ Predict Endpoint
@app.post("/predict")
async def predict(file: UploadFile = File(...)):
    # ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏†‡∏≤‡∏û
    image = Image.open(io.BytesIO(await file.read())).convert("RGB")
    image = image.resize((IMG_SIZE, IMG_SIZE))

    # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô array ‡πÅ‡∏•‡∏∞ preprocess
    img_array = tf.keras.utils.img_to_array(image)
    img_array = np.expand_dims(img_array, axis=0)
    img_array = preprocess_input(img_array)

    # ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢
    predictions = model.predict(img_array)
    probs = tf.nn.softmax(predictions[0]).numpy()

    pred_index = np.argmax(probs)
    pred_class = class_names[pred_index]
    confidence = float(np.max(probs))

    return {
        "class_index": int(pred_index),
        "class_name": pred_class,
        "confidence": confidence,
        "probabilities": {class_names[i]: float(probs[i]) for i in range(len(class_names))}
    }
